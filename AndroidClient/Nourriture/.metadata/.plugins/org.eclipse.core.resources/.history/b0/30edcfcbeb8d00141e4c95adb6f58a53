package task;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import model.MainDatas;
import model.User;

import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import com.google.android.gms.auth.GoogleAuthException;
import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.android.gms.auth.UserRecoverableAuthException;
import com.superphung.nourriture.MainActivity;
import com.superphung.nourriture.helpers;

import android.app.Fragment;
import android.app.FragmentManager;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;

public class RegisterTask extends AsyncTask<String, String, String> {
	private Context context;
	private User user;
	private MainDatas mainDatas;
	private List<NameValuePair> parameters;
	private String type;
	
	public RegisterTask(List<NameValuePair> parameters_, Context context_, MainDatas mainActivityDatas, String type_)
	{
		parameters = parameters_;
		context = context_;
		mainDatas = mainActivityDatas;
		type = type_;
	}
	
	@Override
	protected  void onPreExecute()
	{
		//showing a dialog to tell the user we are authenticating him
		mainDatas.progress = new ProgressDialog(context);
		mainDatas.progress.setTitle("Wait a moment");
		mainDatas.progress.setMessage("Registration in progress...");
		mainDatas.progress.show();
	}
	
	@Override
	protected String doInBackground(String... params) {
		  if (helpers.haveNetworkConnection(context))
		  {
			  String readJSON = null;
			  if (type == "google") 
				  setAccessTokenGoogle();
			  readJSON = helpers.getDatas(mainDatas.urls.get("POST").get("user_registration"),parameters);
			  if (helpers.isNumeric(readJSON))
				  return readJSON;
		      try{
		            JSONObject datas = new JSONObject(readJSON);
		            user = new User(datas.get("name").toString(),datas.get("role").toString(),datas.get("email").toString(), "");
		            return "success";
		        } catch(Exception e){e.printStackTrace();}
		        finally{}
		  }
		  else
			  return "error";
		  return "error";
	}
	
	@Override
	protected void onPostExecute(String result) {
		mainDatas.progress.dismiss();
		if (result.equals("409"))
		  {
			  //Toast toast = Toast.makeText(context, "This user", Toast.LENGTH_SHORT);
			//  toast.show(); 
			  return ;
		  }			
		if (result.equals("error"))
		  {
			  Toast toast = Toast.makeText(context, "Fatal error: cannot connect.Try again later.", Toast.LENGTH_SHORT);
			  toast.show(); 
			  return ;
		  }	
		user.setConnected(true);
        ((MainActivity)context).loginUser(user);
	}
	
	private void setAccessTokenGoogle() {
        String scopes = "oauth2:profile email";
        try {
            String accountID = GoogleAuthUtil.getAccountId(context, parameters.get(0).getValue());
			parameters.add(new BasicNameValuePair("oauthID", accountID));
        } catch (IOException e) {
            Log.e("error:",e.getMessage());
        } catch (UserRecoverableAuthException e) {
            Log.e("error:", e.getMessage());
        } catch (GoogleAuthException e) {
            Log.e("error:", e.getMessage());
        }
        return;
	}
}
